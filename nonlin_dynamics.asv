function dx = nonlin_dynamics(t, x, u)

% Constants
m = 2.300;                      %kg
%Jx = 0.058595;
Jx = 0.02758;
Jy = 0.02758;
%Jy = 0.058595;
Jz = 0.012238;                %Jz = 0.0120276855157049;
ltvc = 0.135;                  %COM to TVC (m)
lrw = 0.09525;                  % COM to RW (m)    
ledf = .100;
m_edf = .700;
g= 9.807;
    
    % States
    p = x(1); q = x(2); c = x(3); wx = x(4); wy = x(5); wz = x(6); 
    px = x(7); py = x(8); pz = x(9); vx = x(10); vy = x(11); vz = x(12); 
    
    % Input
    dp = u(1); dr = u(2); trw = u(3); Ft = u(4); 
    

    
    % Include motor model
    % Include nonlinear lift and drag coefficients
    
    % Nonlinear dynamics
    dp = wx + (wz*cos(p)*sin(q))/cos(q) + (wy*sin(p)*sin(q))/cos(q);
    dq = wy*cos(p) - wz*sin(p);
    dc = (wz*cos(p))/cos(q) + (wy*sin(p))/cos(q);
    
%      dwx = (Jy*wy*wz - Jz*wy*wz + (Ft*sin(dr)*(ltvc + ledf*cos(dr)))/ltvc)/Jx;
%      dwy = (Jx*wx*wz - Jz*wx*wz + (Ft*cos(dr)*sin(dp)*(ltvc + ledf*cos(dp)))/ltvc)/Jy;
%      dwz = (trw - Jx*wx*wy + Jy*wx*wy)/Jz;

     dwx = (ltvc*sin(dr)*(Ft + g*m) + Jy*wy*wz - Jz*wy*wz)/Jx;
     dwy = (Jz*wx*wz - Jx*wx*wz + ltvc*cos(dr)*sin(dp)*(Ft + g*m))/Jy;
     dwz = (trw + Jx*wx*wy - Jy*wx*wy)/Jz;

    dpx = vz*(sin(p)*sin(c) + cos(p)*cos(c)*sin(q)) - vy*(cos(p)*sin(c) - cos(c)*sin(p)*sin(q)) + vx*cos(q)*cos(c);
    dpy = vy*(cos(p)*cos(c) + sin(p)*sin(q)*sin(c)) - vz*(cos(c)*sin(p) - cos(p)*sin(q)*sin(c)) + vx*cos(q)*sin(c);
    dpz = vz*cos(p)*cos(q) - vx*sin(q) + vy*cos(q)*sin(p);
    
%      dvx = (g*m*sin(q) + (Ft*sin(dr))/ltvc)/m;
%      dvy = ((Ft*cos(dr)*sin(dp))/ltvc + g*m*cos(q)*sin(p))/m;
%      dvz = (Ft*cos(dp)*cos(dr) - g*m*cos(p)*cos(q))/m;

     dvx = (sin(dr)*(Ft + g*m) + g*m*sin(q))/m;
     dvy = (cos(dr)*sin(dp)*(Ft + g*m) - g*m*cos(q)*sin(p))/m;
     dvz = ((Ft+m*g)*cos(dp)*cos(dr) - g*m*cos(p)*cos(q))/m;

    

    % If the total force in the body-z direction is larger then gravity (dvz > 0), or the drone already is in
    % the air (pz > 0), return all derivatives. 
    if( dvz > 0 || pz > 0 )
        % Return the derivatives
        dx = [dp; dq; dc; dwx; dwy; dwz; dpx; dpy; dpz; dvx; dvy; dvz];
    else
        % Return the derivatives
        dx = [dp; dq; dc; dwx; dwy; dwz; 0; 0; 0; 0; 0; 0];
    end
    

end